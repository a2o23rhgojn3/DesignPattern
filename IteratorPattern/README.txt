なぜIteratorパターンが必要なのか
＊クラスとそのクラスに対する機能を切り離すことができる。
　そうすることで、依存しないソースが実現できる。

	Program.cs L20~24
	・ここのfor文で使用されているメソッドは、IItratorインターフェースで定義されているメソッドのみを使用している。
		L19でiteratorメソッドの戻し値をBookShelfIteretor型の変数に代入せず、
		Iterator型に代入することで、Iteratorインターフェースで定義されているメソッドのみを使用するということ。	

		つまり、BookShelfクラスのプログラム修正が入ったとしても、BookShelfがIteratorメソッドを定義しており、
		正しいIteratorさえ返してくれれば、L20~24の修正は必要なくなる。

		プログラムにおいて、１つを修正しても、ほかの部分の修正が必要なくなるのが望ましい。

なぜ、インターフェースや抽象クラスが必要なのか
＊すべての処理を実装した具体的なクラスだと、クラス間の結合（依存）が強くなる。
　つまり、プログラム修正が入ると、ほかの部分も修正が入ってしまう。

	・インターフェースや抽象クラスを使用することで、クラス間の結合を弱め、クラスを部品として再利用しやすくなる。
		→ほかのパターンも学習するとピンとくるらしい。